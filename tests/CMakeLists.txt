# Add the unit test library.
# NOTE: probably we should have a check in the build system to determine
# whether Boost libraries are static or dynamic.
if (NOT Boost_USE_STATIC_LIBS)
    ADD_DEFINITIONS(-DBOOST_TEST_DYN_LINK)
endif()

# Add a special definition for the unit tests when the run-on-Valgrind
# option is selected.
if(RUN_ON_VALGRIND AND CMAKE_BUILD_TYPE STREQUAL "Debug")
	add_definitions(-DPIRANHA_RUN_ON_VALGRIND)
endif()

# Pass the current source dir as a definition, so we can load data for tests from the source dir.
add_definitions(-DPIRANHA_TESTS_DIRECTORY="${CMAKE_CURRENT_SOURCE_DIR}")

# Setup for the split compilation of tests.
SET(TEST_NUM "0")
SET(TEST_NSPLIT "3" CACHE INTERNAL "Number of test chunks.")
SET(PIRANHA_TEST_SPLIT no CACHE INTERNAL "Split compilation of piranha test cases for CI.")

MACRO(ADD_PIRANHA_TESTCASE arg1)
	IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		math(EXPR TEST_NUM "(${TEST_NUM} + 1) % ${TEST_NSPLIT}")
		IF((NOT PIRANHA_TEST_SPLIT) OR ("${PIRANHA_TEST_SPLIT_NUM}" STREQUAL "${TEST_NUM}"))
			ADD_EXECUTABLE(${arg1} ${arg1}.cpp)
			TARGET_LINK_LIBRARIES(${arg1} ${MANDATORY_LIBRARIES} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})
			ADD_TEST(${arg1} ${arg1})
	        ENDIF()
	ENDIF()
ENDMACRO(ADD_PIRANHA_TESTCASE)

MACRO(ADD_PIRANHA_PERFORMANCE_TESTCASE arg1)
	IF(CMAKE_BUILD_TYPE STREQUAL "Release")
		math(EXPR TEST_NUM "(${TEST_NUM} + 1) % ${TEST_NSPLIT}")
		IF((NOT PIRANHA_TEST_SPLIT) OR ("${PIRANHA_TEST_SPLIT_NUM}" STREQUAL "${TEST_NUM}"))
			ADD_EXECUTABLE("${arg1}_perf" "${arg1}_perf.cpp" "monagan.hpp" "fateman1.hpp" "fateman2.hpp" "gastineau1.hpp" "gastineau2.hpp" "gastineau3.hpp" "gastineau4.hpp" "pearce1.hpp" "pearce2.hpp")
			TARGET_LINK_LIBRARIES("${arg1}_perf" ${MANDATORY_LIBRARIES} ${Boost_TIMER_LIBRARY} ${Boost_CHRONO_LIBRARY} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_FILESYSTEM_LIBRARY})
			ADD_TEST("${arg1}_perf" "${arg1}_perf")
		ENDIF()
	ENDIF(CMAKE_BUILD_TYPE STREQUAL "Release")
ENDMACRO(ADD_PIRANHA_PERFORMANCE_TESTCASE)

ADD_PIRANHA_TESTCASE(array_key)
ADD_PIRANHA_TESTCASE(atomic_utils)
ADD_PIRANHA_TESTCASE(base_series_multiplier)
ADD_PIRANHA_TESTCASE(cache_aligning_allocator)
ADD_PIRANHA_TESTCASE(convert_to)
ADD_PIRANHA_TESTCASE(demangle)
ADD_PIRANHA_TESTCASE(divisor)
ADD_PIRANHA_TESTCASE(divisor_series)
ADD_PIRANHA_TESTCASE(dynamic_aligning_allocator)
ADD_PIRANHA_TESTCASE(exceptions)
ADD_PIRANHA_TESTCASE(hash_set)
ADD_PIRANHA_TESTCASE(init)
ADD_PIRANHA_TESTCASE(invert)
ADD_PIRANHA_TESTCASE(ipow_substitutable_series)
ADD_PIRANHA_TESTCASE(lambdify)
ADD_PIRANHA_TESTCASE(key_is_convertible)
ADD_PIRANHA_TESTCASE(key_is_multipliable)
ADD_PIRANHA_TESTCASE(kronecker_array)
ADD_PIRANHA_TESTCASE(kronecker_monomial)
ADD_PIRANHA_TESTCASE(math)
ADD_PIRANHA_TESTCASE(memory)
ADD_PIRANHA_TESTCASE(monomial_01)
ADD_PIRANHA_TESTCASE(monomial_02)
ADD_PIRANHA_TESTCASE(mp_integer_01)
ADD_PIRANHA_TESTCASE(mp_integer_02)
ADD_PIRANHA_TESTCASE(mp_integer_03)
ADD_PIRANHA_TESTCASE(mp_integer_04)
ADD_PIRANHA_TESTCASE(mp_rational)
ADD_PIRANHA_TESTCASE(parallel_vector_transform)
ADD_PIRANHA_TESTCASE(poisson_series_01)
ADD_PIRANHA_TESTCASE(poisson_series_02)
ADD_PIRANHA_TESTCASE(polynomial_01)
ADD_PIRANHA_TESTCASE(polynomial_02)
ADD_PIRANHA_TESTCASE(polynomial_03)
ADD_PIRANHA_TESTCASE(polynomial_04)
ADD_PIRANHA_TESTCASE(polynomial_05)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_01)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_02)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_03)
ADD_PIRANHA_TESTCASE(polynomial_truncation)
ADD_PIRANHA_TESTCASE(power_series_01)
ADD_PIRANHA_TESTCASE(power_series_02)
ADD_PIRANHA_TESTCASE(print_coefficient)
ADD_PIRANHA_TESTCASE(print_tex_coefficient)
ADD_PIRANHA_TESTCASE(rational_function_01)
ADD_PIRANHA_TESTCASE(rational_function_02)
ADD_PIRANHA_TESTCASE(real)
ADD_PIRANHA_TESTCASE(real_trigonometric_kronecker_monomial)
ADD_PIRANHA_TESTCASE(runtime_info)
ADD_PIRANHA_TESTCASE(s11n)
ADD_PIRANHA_TESTCASE(safe_cast)
ADD_PIRANHA_TESTCASE(safe_integral_adder)
ADD_PIRANHA_TESTCASE(series_01)
ADD_PIRANHA_TESTCASE(series_02)
ADD_PIRANHA_TESTCASE(series_03)
ADD_PIRANHA_TESTCASE(series_04)
ADD_PIRANHA_TESTCASE(series_05)
ADD_PIRANHA_TESTCASE(series_06)
ADD_PIRANHA_TESTCASE(settings)
ADD_PIRANHA_TESTCASE(small_vector)
ADD_PIRANHA_TESTCASE(static_vector)
ADD_PIRANHA_TESTCASE(substitutable_series)
ADD_PIRANHA_TESTCASE(symbol)
ADD_PIRANHA_TESTCASE(symbol_set)
ADD_PIRANHA_TESTCASE(t_substitutable_series)
ADD_PIRANHA_TESTCASE(term)
ADD_PIRANHA_TESTCASE(thread_barrier)
ADD_PIRANHA_TESTCASE(thread_management)
ADD_PIRANHA_TESTCASE(thread_pool)
ADD_PIRANHA_TESTCASE(trigonometric_series)
ADD_PIRANHA_TESTCASE(tuning)
ADD_PIRANHA_TESTCASE(type_traits)
ADD_PIRANHA_TESTCASE(ulshift)

ADD_PIRANHA_PERFORMANCE_TESTCASE(audi)
ADD_PIRANHA_PERFORMANCE_TESTCASE(estimation)
ADD_PIRANHA_PERFORMANCE_TESTCASE(evaluate)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman1)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman1_dynamic)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman1_rational)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman1_unpacked)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman1_unpacked_truncation)
ADD_PIRANHA_PERFORMANCE_TESTCASE(fateman2)
ADD_PIRANHA_PERFORMANCE_TESTCASE(gastineau1)
ADD_PIRANHA_PERFORMANCE_TESTCASE(gastineau2)
ADD_PIRANHA_PERFORMANCE_TESTCASE(gastineau3)
ADD_PIRANHA_PERFORMANCE_TESTCASE(gastineau4)
ADD_PIRANHA_PERFORMANCE_TESTCASE(memory)
ADD_PIRANHA_PERFORMANCE_TESTCASE(monagan1)
ADD_PIRANHA_PERFORMANCE_TESTCASE(monagan2)
ADD_PIRANHA_PERFORMANCE_TESTCASE(monagan3)
ADD_PIRANHA_PERFORMANCE_TESTCASE(monagan4)
ADD_PIRANHA_PERFORMANCE_TESTCASE(monagan5)
ADD_PIRANHA_PERFORMANCE_TESTCASE(power_series)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce1)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce1_dynamic)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce1_rational)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce1_unpacked)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce2)
ADD_PIRANHA_PERFORMANCE_TESTCASE(pearce2_unpacked)
ADD_PIRANHA_PERFORMANCE_TESTCASE(perminov1)
ADD_PIRANHA_PERFORMANCE_TESTCASE(rectangular)
ADD_PIRANHA_PERFORMANCE_TESTCASE(s11n)
ADD_PIRANHA_PERFORMANCE_TESTCASE(symengine_expand2b)
ADD_PIRANHA_PERFORMANCE_TESTCASE(serialization)
