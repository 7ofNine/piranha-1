include(YACMACompilerLinkerSettings)

add_library(piranha_test STATIC catch_main.cpp)  # create piranha_test i.e. basically catch
target_compile_options(piranha_test PRIVATE
  "$<$<CONFIG:Debug>:${OBAKE_CXX_FLAGS_DEBUG}>"
  "$<$<CONFIG:Release>:${OBAKE_CXX_FLAGS_RELEASE}>"
  "$<$<CONFIG:RelWithDebInfo>:${OBAKE_CXX_FLAGS_RELEASE}>"
  "$<$<CONFIG:MinSizeRel>:${OBAKE_CXX_FLAGS_RELEASE}>"
)


function(ADD_PIRANHA_TESTCASE arg1)
	if(PIRANHA_TEST_NSPLIT)
		# Increase by one the _PIRANHA_TEST_NUM variable in the parent scope.
		# NOTE: we do it here (rather than at the end of the function) because we may exit the
		# function earlier in the return() below.
		# NOTE: even though we updated the _PIRANHA_TEST_NUM variable in the parent scope,
		# the _PIRANHA_TEST_NUM in the *current* scope still contains the old value.
		math(EXPR __PIRANHA_TEST_NUM "(${_PIRANHA_TEST_NUM} + 1) % ${PIRANHA_TEST_NSPLIT}")
		set(_PIRANHA_TEST_NUM ${__PIRANHA_TEST_NUM} PARENT_SCOPE)
	endif()
	if(PIRANHA_TEST_NSPLIT AND NOT "${PIRANHA_TEST_SPLIT_NUM}" STREQUAL "${_PIRANHA_TEST_NUM}")
		return()
	endif()
	add_executable("${arg1}" "${arg1}.cpp")
	target_link_libraries(${arg1} piranha piranha_test)
	target_compile_options(${arg1} PRIVATE "$<$<CONFIG:DEBUG>:${PIRANHA_CXX_FLAGS_DEBUG}>" "$<$<CONFIG:RELEASE>:${PIRANHA_CXX_FLAGS_RELEASE}>" "$<$<CONFIG:RELWITHDEBINFO>:${PIRANHA_CXX_FLAGS_RELWITHDEBINFO}>")
	target_compile_definitions(${arg1} PRIVATE PIRANHA_BINARY_TESTS_DIR="${CMAKE_CURRENT_BINARY_DIR}")
	#if(NOT (YACMA_COMPILER_IS_MSVC AND YACMA_COMPILER_IS_CLANGXX))
		# Let's setup the target C++ standard, but only if the user did not provide it manually.
		if(NOT CMAKE_CXX_STANDARD)
            set_property(TARGET ${arg1} PROPERTY CXX_STANDARD 20) #only C++20 and higher is supported
	#	endif()
		endif()
	add_test("${arg1}" "${arg1}")
endfunction()

ADD_PIRANHA_TESTCASE(array_key)
ADD_PIRANHA_TESTCASE(atomic_utils)
ADD_PIRANHA_TESTCASE(base_series_multiplier)
ADD_PIRANHA_TESTCASE(binomial)
ADD_PIRANHA_TESTCASE(cache_aligning_allocator)
ADD_PIRANHA_TESTCASE(convert_to)
ADD_PIRANHA_TESTCASE(degree)
ADD_PIRANHA_TESTCASE(demangle)
ADD_PIRANHA_TESTCASE(divisor_01)
ADD_PIRANHA_TESTCASE(divisor_02)
ADD_PIRANHA_TESTCASE(divisor_series_01)
ADD_PIRANHA_TESTCASE(divisor_series_02)
ADD_PIRANHA_TESTCASE(dynamic_aligning_allocator)
ADD_PIRANHA_TESTCASE(exceptions)
ADD_PIRANHA_TESTCASE(gcd)
ADD_PIRANHA_TESTCASE(hash_set_01)
ADD_PIRANHA_TESTCASE(hash_set_02)
ADD_PIRANHA_TESTCASE(integer_01)
ADD_PIRANHA_TESTCASE(integer_02)
ADD_PIRANHA_TESTCASE(invert)
ADD_PIRANHA_TESTCASE(ipow_substitutable_series)
ADD_PIRANHA_TESTCASE(is_cf)
ADD_PIRANHA_TESTCASE(is_key)
ADD_PIRANHA_TESTCASE(is_one)
ADD_PIRANHA_TESTCASE(is_zero)
ADD_PIRANHA_TESTCASE(key_degree)
ADD_PIRANHA_TESTCASE(key_is_zero)
ADD_PIRANHA_TESTCASE(key_is_one)
ADD_PIRANHA_TESTCASE(key_is_convertible)
ADD_PIRANHA_TESTCASE(key_is_multipliable)
ADD_PIRANHA_TESTCASE(key_ldegree)
ADD_PIRANHA_TESTCASE(kronecker_array)
ADD_PIRANHA_TESTCASE(kronecker_monomial_01)
ADD_PIRANHA_TESTCASE(kronecker_monomial_02)
ADD_PIRANHA_TESTCASE(lambdify)
ADD_PIRANHA_TESTCASE(ldegree)
ADD_PIRANHA_TESTCASE(math)
ADD_PIRANHA_TESTCASE(memory)
ADD_PIRANHA_TESTCASE(monomial_01)
ADD_PIRANHA_TESTCASE(monomial_02)
ADD_PIRANHA_TESTCASE(parallel_vector_transform)
ADD_PIRANHA_TESTCASE(poisson_series_01)
ADD_PIRANHA_TESTCASE(poisson_series_02)
ADD_PIRANHA_TESTCASE(poisson_series_03)
ADD_PIRANHA_TESTCASE(poisson_series_04)
ADD_PIRANHA_TESTCASE(polynomial_01)
ADD_PIRANHA_TESTCASE(polynomial_02)
ADD_PIRANHA_TESTCASE(polynomial_03)
ADD_PIRANHA_TESTCASE(polynomial_04)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_01)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_02)
ADD_PIRANHA_TESTCASE(polynomial_multiplier_03)
ADD_PIRANHA_TESTCASE(polynomial_truncation)
ADD_PIRANHA_TESTCASE(pow)
ADD_PIRANHA_TESTCASE(power_series_01)
ADD_PIRANHA_TESTCASE(power_series_02)
ADD_PIRANHA_TESTCASE(print_coefficient)
ADD_PIRANHA_TESTCASE(print_tex_coefficient)
ADD_PIRANHA_TESTCASE(rational_01)
ADD_PIRANHA_TESTCASE(rational_02)
ADD_PIRANHA_TESTCASE(real_01)
ADD_PIRANHA_TESTCASE(real_02)
ADD_PIRANHA_TESTCASE(real_trigonometric_kronecker_monomial_01)
ADD_PIRANHA_TESTCASE(real_trigonometric_kronecker_monomial_02)
ADD_PIRANHA_TESTCASE(runtime_info)
ADD_PIRANHA_TESTCASE(s11n)
ADD_PIRANHA_TESTCASE(safe_cast)
ADD_PIRANHA_TESTCASE(safe_convert)
ADD_PIRANHA_TESTCASE(safe_integral_arith)
ADD_PIRANHA_TESTCASE(series_01)
ADD_PIRANHA_TESTCASE(series_02)
ADD_PIRANHA_TESTCASE(series_03)
ADD_PIRANHA_TESTCASE(series_04)
ADD_PIRANHA_TESTCASE(series_05)
ADD_PIRANHA_TESTCASE(series_06)
ADD_PIRANHA_TESTCASE(series_07)
ADD_PIRANHA_TESTCASE(series_08)
ADD_PIRANHA_TESTCASE(settings)
ADD_PIRANHA_TESTCASE(sincos)
ADD_PIRANHA_TESTCASE(small_vector_01)
ADD_PIRANHA_TESTCASE(small_vector_02)
ADD_PIRANHA_TESTCASE(static_vector_01)
ADD_PIRANHA_TESTCASE(static_vector_02)
ADD_PIRANHA_TESTCASE(substitutable_series)
ADD_PIRANHA_TESTCASE(symbol_utils)
ADD_PIRANHA_TESTCASE(t_substitutable_series)
ADD_PIRANHA_TESTCASE(term)
ADD_PIRANHA_TESTCASE(thread_pool)
ADD_PIRANHA_TESTCASE(trigonometric_series)
ADD_PIRANHA_TESTCASE(tuning)
ADD_PIRANHA_TESTCASE(type_traits)
