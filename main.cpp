#include <iostream>
#include <mutex>
#include <thread>
#include <type_traits>
#include <vector>

#include <boost/format.hpp>

#include "src/piranha.hpp"

piranha::integer get_integer()
{
	return piranha::integer();
}

int main()
{
	piranha::integer i, j;
	j = get_integer();
	piranha::integer k(std::move(j));
	std::cout << i << '\n';
	piranha::integer l("-45475934753489573453478957348975348978979878979");
	std::cout << l << '\n';
	std::cout << piranha::integer(1E56) << '\n';
	std::cout << piranha::integer(100) << '\n';
	std::cout << piranha::integer(100L) << '\n';
	std::cout << piranha::integer(100U) << '\n';
	std::cout << piranha::integer(100LU) << '\n';
	std::cout << piranha::integer(100LL) << '\n';
	std::cout << piranha::integer(100LLU) << '\n';
	piranha::integer foo;
	std::cin >> foo;
	std::cout << foo << '\n';
	foo = "123456";
	std::cout << foo << '\n';
	foo = "-123456";
	std::cout << foo << '\n';
	foo = 50000;
	std::cout << foo << '\n';
	std::cout << boost::lexical_cast<std::string>(1E400L) << '\n';
	std::cout << static_cast<unsigned short>(foo) << '\n';
	std::cout << static_cast<long long>(foo) << '\n';
	foo = "-231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123121";
	std::cout << static_cast<double>(foo) << '\n';
	std::cout << boost::format("%.0Lf\n") % static_cast<double>(foo);
	std::cout << boost::format("%.0Lf\n") % 123123123888218.4534645L;
	foo =	"231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905834590583490548905"
		"3485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123"
		"5923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123121231231231212312"
		"3123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312"
		"1212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534"
		"9058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905"
		"8345905834905489053485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"1231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123"
		"1212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583"
		"4905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349"
		"0548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"3123123459234584905834590583490548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312"
		"3121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834134322222677687789999989889888888"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312123123123121231231231234592345849058345905834905489054"
		"3485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123"
		"5923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123121231231231212312"
		"3123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312"
		"1212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534"
		"9058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905"
		"8345905834905489053485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"1231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123"
		"1212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583"
		"4905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349"
		"0548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"3123123459234584905834590583490548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312"
		"3121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834134322222677687789999989889888888"
		"3485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123"
		"5923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123121231231231212312"
		"3123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312"
		"1212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905834590583490548905348590348534"
		"9058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312312312123123123123459234584905"
		"8345905834905489053485903485349058349058349058341231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"1231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121231231231212312312312123123123"
		"1212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583490583412312312312123123123121"
		"2312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349054890534859034853490583490583"
		"4905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312312312345923458490583459058349"
		"0548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312312123123123121231231231212312"
		"3123123459234584905834590583490548905348590348534905834905834905834123123123121231231231212312312312123123123121231231231212312312"
		"3121231231231212312312312123123123123459234584905834590583490548905348590348534905834905834905834134322222677687789999989889888888";
	std::cout << static_cast<long double>(foo) << '\n';
	std::cout << piranha::integer(1.3L) << '\n';
}
